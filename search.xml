<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>由源码泄露到RCE-[Mssql]</title>
      <link href="/2023/02/03/%5BMssql%5D-%E7%94%B1%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E5%88%B0RCE/"/>
      <url>/2023/02/03/%5BMssql%5D-%E7%94%B1%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E5%88%B0RCE/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Password error, please try again" data-whm="Password error, please try again">  <script id="hbeData" type="hbeData" data-hmacdigest="d7688d238d9786f1969aee6897b538c97d72c734764db132c4b0a0ffa4a61b36"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">Please input a password</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thinkphp3.2.3-[代码审计]</title>
      <link href="/2019/05/03/Thinkphp3.2.3-%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D/"/>
      <url>/2019/05/03/Thinkphp3.2.3-%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="0x00-为什么要使用框架"><a href="#0x00-为什么要使用框架" class="headerlink" title="0x00:为什么要使用框架"></a>0x00:为什么要使用框架</h3><blockquote><p>使用框架相当于别人已经帮助完成一些基础工作，开发者只需要集中精力在系统的业务逻辑设计上即可。而且相较于原生代码开发更稳定、安全、易扩展。</p></blockquote><h3 id="0x01-TP3-2-3程序目录结构"><a href="#0x01-TP3-2-3程序目录结构" class="headerlink" title="0x01:TP3.2.3程序目录结构"></a>0x01:TP3.2.3程序目录结构</h3><ul><li>入口文件（应用对外提供的接口）</li><li>核心框架目录</li><li>模块集合（<code>Common</code>模块优先于其他模块执行）</li><li>缓存目录（<code>./Application/Runtime</code>）</li><li>公共资源目录（<code>./Public</code>）</li></ul><p>更详细的可以看官方手册上描述的：</p><p>@<a href="http://document.thinkphp.cn/manual_3_2.html#directory_structure">http://document.thinkphp.cn/manual_3_2.html#directory_structure</a></p><h3 id="0x02-MVC分层架构"><a href="#0x02-MVC分层架构" class="headerlink" title="0x02:MVC分层架构"></a>0x02:MVC分层架构</h3><ul><li>控制器（<code>Controller</code>）：负责用户请求的调度和处理业务逻辑</li><li>模型（<code>Model</code>）：负责业务数据的处理和与数据库的交互</li><li>视图（<code>View</code>）：提供了展示数据的各种方式</li></ul><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040008785.png" alt="请添加图片描述"></p><h3 id="0x03-模板渲染-amp-入口绑定"><a href="#0x03-模板渲染-amp-入口绑定" class="headerlink" title="0x03:模板渲染&amp;入口绑定"></a>0x03:模板渲染&amp;入口绑定</h3><p>在TP3.2.3模板中先建立一个Admin文件夹，内容及文件夹名称Copy前端文件夹Home即可</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040008212.png" alt="请添加图片描述"></p><p>如果想要更改默认首页内容，在<code>Application\Admin\Controller\IndexController.class.php</code> （<strong>控制器</strong>）进行修改</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040008999.png" alt="在这里插入图片描述"></p><p>在开发时一般后台所使用的Public文件夹是独立开的，因此这里后台也就需要更改一下默认的Public文件夹，需要先在应用入口文件中定义应用目录</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040008679.png" alt="在这里插入图片描述"></p><p>然后在<code>Admin\Conf\config.php</code>处进行配置</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040008603.png" alt="在这里插入图片描述"></p><p>最后将<code>JS/CSS/HTML</code> （<strong>视图</strong>）文件进行引入，修改路径即可成功访问</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040008890.png" alt="在这里插入图片描述"></p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040008817.png" alt="在这里插入图片描述"></p><p>除此之外，还是有很多知识是没有接触到的，上面控制器中代码有<strong>M，D，U，I</strong>这些方法，具体功能参考大师傅的文章：</p><p>@<a href="https://www.cnblogs.com/kenshinobiy/p/9165662.html">https://www.cnblogs.com/kenshinobiy/p/9165662.html</a></p><p>代码则位于<code>Thinkphp/Common/functions.php</code> </p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040008892.png" alt="请添加图片描述"></p><p>例如 <code>I</code>方法主要用于更加方便和安全的获取系统输入变量，用法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">I</span>(<span class="string">&#x27;get.id&#x27;</span>); &lt;==&gt; <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"><span class="title function_ invoke__">I</span>(<span class="string">&#x27;id&#x27;</span>); &lt;==&gt; <span class="title function_ invoke__">I</span>(<span class="string">&#x27;param.id&#x27;</span>) </span><br><span class="line">param自动判断请求类型获取GET、POST或者PUT参数</span><br></pre></td></tr></table></figure><p>其他函数的用法看手册即可</p><h3 id="0x04-TP3路由格式："><a href="#0x04-TP3路由格式：" class="headerlink" title="0x04:TP3路由格式："></a>0x04:TP3路由格式：</h3><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040008353.png" alt="请添加图片描述"></p><p>这里通过一个简单的例子来了解常用的四种路由模式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Home</span>\<span class="title class_">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello &quot;</span>.<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>普通模式：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost/index.php?m=Home&amp;c=Index&amp;f=index&amp;name=Sn0w</span></span><br><span class="line">http:<span class="comment">//网址/index.php?m=模块名称&amp;c=控制器&amp;a=方法</span></span><br></pre></td></tr></table></figure><p><strong>兼容模式：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost/index.php?s=Home/Index/index/name/Sn0w</span></span><br><span class="line">http:<span class="comment">//网址/index.php?s=/模块/控制器/方法</span></span><br></pre></td></tr></table></figure><p><strong>REWRITE模式：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost/Home/Index/index/name/Sn0w/</span></span><br><span class="line">http:<span class="comment">//网址/模块/控制器/操作方法</span></span><br></pre></td></tr></table></figure><p><strong>PATHINFO模式：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost/index.php/Home/Index/index/name/Sn0w/</span></span><br><span class="line">http:<span class="comment">//网址/index.php/模块/控制器/操作方法</span></span><br></pre></td></tr></table></figure><p>最终呈现的效果都一样：</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009021.png" alt="在这里插入图片描述"></p><h2 id="TP3-2-3-SQL注入"><a href="#TP3-2-3-SQL注入" class="headerlink" title="TP3.2.3 SQL注入"></a>TP3.2.3 SQL注入</h2><h3 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h3><p>先去官网上下载一份TP3.2.3源码，再创建一个数据库<code>thinkphp</code>和数据表<code>users</code></p><p>@<a href="https://www.thinkphp.cn/Down">https://www.thinkphp.cn/Down</a></p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009886.png" alt="请添加图片描述"></p><p>添加好数据后，将数据库配置设置好</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009205.png" alt="请添加图片描述"></p><p>访问一下<code>Application</code>目录下便会自动生成目录结构，接下来将控制器给配置好</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Application/Home/Controller/IndexController.<span class="keyword">class</span>.php</span><br><span class="line"><span class="comment">#更改内容为:</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Home</span>\<span class="title class_">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="title function_ invoke__">M</span>(<span class="string">&#x27;users&#x27;</span>)-&gt;<span class="title function_ invoke__">find</span>(<span class="title function_ invoke__">I</span>(<span class="string">&#x27;GET.id&#x27;</span>));</span><br><span class="line">        <span class="title function_ invoke__">dump</span>(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下效果：</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009696.png" alt="在这里插入图片描述"></p><p>下断点，至于如何设置<code>PHPstorm</code>调试的可以参考如下文章：</p><p>@<a href="https://blog.csdn.net/Xxy605/article/details/120973447">https://blog.csdn.net/Xxy605/article/details/120973447</a></p><p>接下来就输入正常的SQL测试语句<code>?id=1&#39; or 1=1%23</code> ，看一下传入的参数所走的流程：</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009110.png" alt="在这里插入图片描述"></p><p><code>M</code>方法先实例化一个数据库操作对象，F8跳过此方法到<code>I</code>方法中，不影响传入参数的代码就不再叙述，默认的filter是<code>htmlspecialchars()</code></p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009456.png" alt="在这里插入图片描述"></p><p>先经过<code>htmlspecialchars()</code> 的处理，此函数默认是不转义单引号的，之后再回调<code>think_filter</code>函数进行过滤</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009760.png" alt="在这里插入图片描述"></p><p>跟踪一下这个函数，是黑名单过滤，看都过滤了哪些字符</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009044.png" alt="在这里插入图片描述"></p><p>最终参数输出为</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009110.png" alt="在这里插入图片描述"></p><p><code>I</code>方法结束后，便会进入到<code>find</code>方法中去，这个方法作用是查询数据，F7跟着代码走一下，到分析表达式这块，这里调用了<code>_parseOptions()</code> 这个函数</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009435.png" alt="在这里插入图片描述"></p><p>此时id还是之前传入的<code>1&#39; or 1=1#</code> ，跟进这个函数看做了什么处理，如下图进入字段类型验证这段代码</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009660.png" alt="在这里插入图片描述"></p><p>又有一个<code>_parseType</code> 函数对我们传入的参数（即<code>$options[&#39;where&#39;]</code>）进行处理，此时id依旧是我们传入的，跟进这个函数继续看</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009758.png" alt="在这里插入图片描述"></p><p>这里的代码把我们传入的id进行了强制类型转换，使用了<code>intval</code>这个函数，到这一步我们传入的参数就变成了1，然后再返回给<code>_parseOptions()</code> 这个函数，再进行查询便不会出现SQL注入</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009923.png" alt="请添加图片描述"></p><p>梳理一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=<span class="number">1</span><span class="string">&#x27; or 1=1# -&gt; M() -&gt; find() -&gt; _parseOptions() -&gt; _parseType()</span></span><br></pre></td></tr></table></figure><p>传入的参数便是在<code>_parseType()</code> 这个函数处被处理了，但具体是怎么处理的还是没搞清楚，因为前面创建数据库<code>id</code>列使用的是<code>int</code> 类型，所以到<code>intval</code>这个函数就会直接被处理，所以将<code>id</code>列改为<code>varchar</code>，F7继续跟进</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009571.png" alt="在这里插入图片描述"></p><p>进入<code>buildSelectSql</code> 这个函数前，传入的参数还是正常的，跟进这个函数，进入到<code>parseSql</code> 函数，作用是对原初的SQL语句进行替换，构造的<code>id</code>在<code>where</code>那里，跟进一下<code>parseWhere()</code></p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009902.png" alt="在这里插入图片描述"></p><p>跟进到此，又发现调用了两个函数，此时传入的还是之前的 </p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009044.png" alt="在这里插入图片描述"></p><p>跟进<code>parseWhereItem</code> 这个函数，发现到这一步又调用了<code>parseValue</code> </p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009949.png" alt="在这里插入图片描述"></p><p>进行跟进看一下这个函数对传入的参数进行了什么处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * value分析</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> protected</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseValue</span>(<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$value</span>)) &#123;</span><br><span class="line">            <span class="variable">$value</span> =  <span class="title function_ invoke__">strpos</span>(<span class="variable">$value</span>,<span class="string">&#x27;:&#x27;</span>) === <span class="number">0</span> &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$value</span>,<span class="title function_ invoke__">array_keys</span>(<span class="variable">$this</span>-&gt;bind))? <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">escapeString</span>(<span class="variable">$value</span>) : <span class="string">&#x27;\&#x27;&#x27;</span>.<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">escapeString</span>(<span class="variable">$value</span>).<span class="string">&#x27;\&#x27;&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(<span class="keyword">isset</span>(<span class="variable">$value</span>[<span class="number">0</span>]) &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$value</span>[<span class="number">0</span>]) &amp;&amp; <span class="title function_ invoke__">strtolower</span>(<span class="variable">$value</span>[<span class="number">0</span>]) == <span class="string">&#x27;exp&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$value</span> =  <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">escapeString</span>(<span class="variable">$value</span>[<span class="number">1</span>]);</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$value</span>)) &#123;</span><br><span class="line">            <span class="variable">$value</span> =  <span class="title function_ invoke__">array_map</span>(<span class="keyword">array</span>(<span class="variable">$this</span>, <span class="string">&#x27;parseValue&#x27;</span>),<span class="variable">$value</span>);</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(<span class="title function_ invoke__">is_bool</span>(<span class="variable">$value</span>))&#123;</span><br><span class="line">            <span class="variable">$value</span> =  <span class="variable">$value</span> ? <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(<span class="title function_ invoke__">is_null</span>(<span class="variable">$value</span>))&#123;</span><br><span class="line">            <span class="variable">$value</span> =  <span class="string">&#x27;null&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那这就很明显了，第一个if条件判断成功，进入<code>escapeString</code> 函数，使用<code>addslashes()</code> 转义传入的单引号，后面就无需再跟进了就是拼接SQL语句</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009451.png" alt="在这里插入图片描述"></p><p>但代码中还有很多判断数组的代码，因此就要考虑一下<code>id</code>传数组，再跟进代码看一下是否存在SQL注入,最后用一张图来总结便是：</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009824.png" alt="在这里插入图片描述"></p><h3 id="Thinkphp3-2-3-where注入"><a href="#Thinkphp3-2-3-where注入" class="headerlink" title="Thinkphp3.2.3 where注入"></a>Thinkphp3.2.3 where注入</h3><p><strong>Payload：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkphp_3.<span class="number">2.3</span>/index.php/home/index/shy?id[where]=<span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span>=<span class="title function_ invoke__">updatexml</span>(<span class="number">1</span>,<span class="title function_ invoke__">concat</span>(<span class="number">0x7e</span>,(select password <span class="keyword">from</span> users limit <span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009721.png" alt="在这里插入图片描述"></p><p>先放出Payload，下面跟着代码看是怎么出现的这个<code>where</code> 报错注入，这次传入的参数为数组 <code>?id[where]= 1 and 1=updatexml(1,concat(0x7e,(select password from users limit 1),0x7e),1)%23</code> ，<code>I</code>方法在最后的代码会对数组参数的每个成员使用<code>think_filter</code>函数 </p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009867.png" alt="在这里插入图片描述"></p><p>刚才跟着正常的SQL测试语句知道，知道<code>think_filter</code>函数是一个黑名单，过滤了一些特殊字符，但明显过滤的不是很全，<code>updatexml、extractvalue</code> 这些报错函数都未过滤</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009039.png" alt="在这里插入图片描述"></p><p>继续跟进便进入了<code>find</code>函数到<code>_parseOptions</code> 这个函数中，在进入此函数前<code>$options</code>是</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009319.png" alt="在这里插入图片描述"></p><p>刚才正常传入的SQL测试语句只有进入到<code>_parseType()</code>后才会被<code>intval</code> 函数给强制转换，但这里这个if判断中的<code>is_array($options[&#39;where&#39;])</code>没有满足，此时的where的值不是数组</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009897.png" alt="在这里插入图片描述"></p><p>和上面正常传入的SQL测试语句对比一下，便会发现不同，最后通过此函数处理后传入的payload依旧没有变</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009594.png" alt="在这里插入图片描述"></p><p>F7继续跟进</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009656.png" alt="在这里插入图片描述"></p><p>到<code>select</code>函数后，发现<code>buildSelectSql</code> 的作用是拼接SQL语句</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009913.png" alt="在这里插入图片描述"></p><p>跟进这个函数</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009819.png" alt="在这里插入图片描述"></p><p>第一个<code>if</code>语句就是计算<code>limit</code>，这里不是重点，发现后面又调用了<code>parseSql</code> 这个函数</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009357.png" alt="在这里插入图片描述"></p><p>构造的参数是在<code>where</code> ，跟进看一下</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009408.png" alt="在这里插入图片描述"></p><p>此时的<code>$whereStr</code> 是字符串，所以就没有经过中间的代码，直接返回此语句</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009515.png" alt="在这里插入图片描述"></p><p>F7跟进就会发现最终拼接的语句便还是我们传入的，并没有被过滤掉，便导致了thinkphp3.2.3 where注入</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009669.png" alt="在这里插入图片描述"></p><p><strong>官方修补方法：</strong></p><p>@<a href="https://github.com/top-think/thinkphp/commit/9e1db19c1e455450cfebb8b573bb51ab7a1cef04">https://github.com/top-think/thinkphp/commit/9e1db19c1e455450cfebb8b573bb51ab7a1cef04</a></p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009777.png" alt="在这里插入图片描述"></p><p><code>v3.2.4</code>将<code>$options</code>和<code>$this-&gt;options</code>进行了区分，从而传入的参数无法污染到<code>$this-&gt;options</code>，也就无法控制sql语句了</p><h3 id="Thinkphp3-2-3-exp注入"><a href="#Thinkphp3-2-3-exp注入" class="headerlink" title="Thinkphp3.2.3 exp注入"></a>Thinkphp3.2.3 exp注入</h3><p><strong>payload：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username[<span class="number">0</span>]=exp&amp;username[<span class="number">1</span>]==<span class="number">1</span> <span class="keyword">and</span> <span class="title function_ invoke__">updatexml</span>(<span class="number">1</span>,<span class="title function_ invoke__">concat</span>(<span class="number">0x7e</span>,<span class="title function_ invoke__">user</span>(),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009670.png" alt="在这里插入图片描述"></p><p>把环境重新更改一下，使用全局数组进行传参，这里之所以不用<code>I</code>函数来获取参数，是因为<code>I</code>函数会回调<code>think_filter()</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">think_filter</span>(<span class="params">&amp;<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// TODO 其他安全过滤</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤查询特殊字符</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i&#x27;</span>, <span class="variable">$value</span>)) &#123;</span><br><span class="line">        <span class="variable">$value</span> .= <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了EXP字符串，并会在后面拼接一个空格，这个点会影响exp注入，到后面便能了解了，打上断点，先进入<code>where</code>函数中</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009605.png" alt="在这里插入图片描述"></p><p>只有最后的代码对传入的参数发挥了作用,其作用便是把数组<code>array(&#39;username&#39; =&gt; $_GET[&#39;username&#39;])</code> 传给<code>$this-&gt;options[&#39;where&#39;]</code> ，继续跟进到<code>find</code>函数，一直到<code>parseWhere()</code> 函数，观察到这一步和上面的where注入有哪些区别</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009763.png" alt="在这里插入图片描述"></p><p>传入的参数会进入到<code>parseWhereItem()</code> 函数中，而where注入的是当作字符串直接跳过了这一段代码，先判断该变量是否为数组，再判断索引为0的值是否为字符串，到下面的代码还要验证该索引值是否等于<code>exp</code></p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009900.png" alt="在这里插入图片描述"></p><p>关键点在于下面的代码：</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009166.png" alt="在这里插入图片描述"></p><p>正常来说传入的参数是字符串即<code>$val=test</code>，但这里传入了数组，<code>$exp</code> 便是<code>$val[0]</code></p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009323.png" alt="在这里插入图片描述"></p><p>又满足了<code>elseif</code>语句（跟到这里便也能理解为什么要用超全局数组，而不用I函数了，如果使用I函数不满足条件，便会异常抛出，从而影响注入），把<code>where</code>条件直接用点拼接，这时传入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username[<span class="number">0</span>]=exp&amp;username[<span class="number">1</span>]==<span class="number">1</span> <span class="keyword">and</span> test</span><br></pre></td></tr></table></figure><p>便会造成SQL注入，最终拼接出来的语句便是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> users where `username`  <span class="variable">$val</span>[<span class="number">1</span>]  limit <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009577.png" alt="在这里插入图片描述"></p><h3 id="thinkphp3-2-3-bind注入"><a href="#thinkphp3-2-3-bind注入" class="headerlink" title="thinkphp3.2.3 bind注入"></a>thinkphp3.2.3 bind注入</h3><blockquote><p><strong>简述</strong>：由于框架实现安全数据库过程中在<code>update</code>更新数据的过程中存在SQL语句的拼接，并且当传入数组未过滤时导致出现了SQL注入</p></blockquote><p>将环境更改一下</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009554.png" alt="在这里插入图片描述"></p><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id[<span class="number">0</span>]=bind&amp;id[<span class="number">1</span>]=<span class="number">0</span> <span class="keyword">and</span> <span class="title function_ invoke__">updatexml</span>(<span class="number">1</span>,<span class="title function_ invoke__">concat</span>(<span class="number">0x7e</span>,<span class="title function_ invoke__">user</span>(),<span class="number">0x7e</span>),<span class="number">1</span>)&amp;password=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>传入参数，跟进一下代码，看一下为什么这样的<code>payload</code>能造成报错注入，跟前面几条链一样，参数会先赋值给<code>$this-&gt;options[&#39;where&#39;]</code> </p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009037.png" alt="在这里插入图片描述"></p><p>再跟进到<code>save</code>方法中去，调用<code>_parseOptions</code> 方法</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040009642.png" alt="在这里插入图片描述"></p><p>到这一步<code>$val</code> 为数组，不属于标量，所以不经过<code>_parseType</code>方法验证类型</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010811.png" alt="在这里插入图片描述"></p><p>从该方法中出来后<code>$this-&gt;options</code>赋值给 <code>$options</code> ，接下来便调用<code>$this-&gt;db-&gt;update</code>方法</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010861.png" alt="在这里插入图片描述"></p><p>在这里出现一段SQL语句和参数绑定，跟进<code>parseSet</code>这个方法查看</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010113.png" alt="在这里插入图片描述"></p><p>再跟进到<code>$this-&gt;bindParam($name,$val);</code> </p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010614.png" alt="在这里插入图片描述"></p><p>因为<code>$this-&gt;bind</code>为空，所以<code>$name</code>为0，而<code>$val</code>为1</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010551.png" alt="在这里插入图片描述"></p><p>经过此方法的处理,SQL语句便存在一个<code>:</code> 阻断了注入，最终绑定参数为：</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010565.png" alt="在这里插入图片描述"></p><p>产生的SQL语句为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE `users` SET `password`=:<span class="number">0</span></span><br></pre></td></tr></table></figure><p>再调用<code>parseWhereItem</code>方法拼接<code>where</code>部分处理后的语句，当<code>$exp</code>为bind时，<code>$whereStr</code>部分可控</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010810.png" alt="在这里插入图片描述"></p><p>两段SQL语句再进行合并，最终形成的SQL语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE `users` SET `password`=:<span class="number">0</span> WHERE `id` = :<span class="number">0</span> <span class="keyword">and</span> <span class="title function_ invoke__">updatexml</span>(<span class="number">1</span>,<span class="title function_ invoke__">concat</span>(<span class="number">0x7e</span>,<span class="title function_ invoke__">user</span>(),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>最后跟进<code>execute</code>方法，该方法中有对绑定参数的处理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;bind))&#123;</span><br><span class="line">   <span class="variable">$that</span>   =   <span class="variable language_">$this</span>;</span><br><span class="line">   <span class="variable language_">$this</span>-&gt;queryStr =   <span class="title function_ invoke__">strtr</span>(<span class="variable">$this</span>-&gt;queryStr,<span class="title function_ invoke__">array_map</span>(function(<span class="variable">$val</span>) <span class="keyword">use</span>(<span class="variable">$that</span>)&#123; <span class="keyword">return</span> <span class="string">&#x27;\&#x27;&#x27;</span>.<span class="variable">$that</span>-&gt;<span class="title function_ invoke__">escapeString</span>(<span class="variable">$val</span>).<span class="string">&#x27;\&#x27;&#x27;</span>; &#125;,<span class="variable language_">$this</span>-&gt;bind));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这两行代码便是起到替换的作用，代码先是创建一个<a href="https://www.cnblogs.com/echojson/p/10957362.html">闭包</a>，调用<code>array_map</code>，对<code>$this-&gt;bind</code>这个数组中的每个参数都调用这个闭包，对<code>$this-&gt;bind</code>进行处理，未处理前为<code>array(&quot;:0&quot;=&gt;&quot;1&quot;);</code> ，处理后为：<code>array(&quot;:0&quot;=&gt;&quot;&#39;1&#39;&quot;);</code> ，最后再通过<code>strtr</code>函数处理<code>$this-&gt;queryStr</code>语句，得到的结果如下：</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010385.png" alt="在这里插入图片描述"></p><p><code>:0</code>替换为外部传进来的字符串，所以将传入参数等于0，这样就拼接了一个<code>:0</code>，然后会通过<code>strtr()</code>被替换为1，SQL语句便可以正常执行，这也就是为什么payload中<code>id[1]=0</code></p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010797.png" alt="在这里插入图片描述"></p><p><strong>官方修复：</strong></p><p>过滤<code>bind</code>即可</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010258.png" alt="在这里插入图片描述"></p><h2 id="TP3-2-3-RCE漏洞"><a href="#TP3-2-3-RCE漏洞" class="headerlink" title="TP3.2.3 RCE漏洞"></a>TP3.2.3 RCE漏洞</h2><blockquote><p>业务代码中如果模板赋值方法assign的第一个参数可控，则可导致模板文件路径变量被覆盖为携带攻击代码的文件路径，造成任意文件包含，执行任意代码</p></blockquote><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010066.png" alt="在这里插入图片描述"></p><p>程序会进入模板渲染方法中，需要先创建对应的模板文件（<code>View</code>），模板文件位置为：<code>\Application\Home\View\Index\index.html</code> ，这里的模板渲染方法除了<code>display</code>，也可以为<code>fetch、show</code></p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010959.png" alt="在这里插入图片描述"></p><p>但使用<code>fetch</code>会有一些区别，如上图其程序逻辑会使用到<code>ob_start()</code>打开缓冲区，所以PHP代码的数据块和<code>echo()</code>输出都会进入缓冲区而不会立刻输出，如果想要<code>fetch</code>方法对应的攻击代码输出的话，需要在攻击代码末尾带上<code>exit()</code>或<code>die()</code></p><p>Debug开启和关闭是有一些区别的，具体如下：</p><p><strong>Log记录目录：</strong></p><p>若开启debug模式日志会到：<code>\Application\Runtime\Logs\Home\</code>下</p><p>若未开启debug模式日志会到：<code>\Application\Runtime\Logs\Common\</code>下</p><p><strong>这里以Debug关闭为例（</strong><code>define(&#39;APP_DEBUG&#39;,false)</code><strong>）</strong></p><p><strong>构造请求包：</strong></p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010316.png" alt="在这里插入图片描述"></p><p><strong>构造攻击请求：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?m=Home&amp;c=Index&amp;a=index&amp;value[_filename]=./Application/Runtime/Logs/Common/<span class="number">22_08_03</span>.log</span><br></pre></td></tr></table></figure><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010855.png" alt="在这里插入图片描述"></p><p>若<code>Debug</code>开启，正确的请求日志也会被记录到日志中，只是日志路径不 一样了而已</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010429.png" alt="在这里插入图片描述"></p><p>下面跟着代码来走一遍，看看此payload如何触发文件包含导致RCE</p><p>先传入参数会先进入<code>assign</code>函数中，再赋值给<code>$this→tVar</code></p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010989.png" alt="在这里插入图片描述"></p><p>之后会进入到<code>display</code>方法中，<code>display</code>方法开始解析并获取模板文件内容，此时模板文件路径和内容为空</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010591.png" alt="在这里插入图片描述"></p><p>再进入到<code>fetch</code>方法中，此时传入的参数为空，程序会根据配置去获取默认模板文件的位置</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010364.png" alt="在这里插入图片描述"></p><p>当<code>TMPL_ENGINE_TYPE</code> 配置为<code>php</code>时，会采用PHP原生模板，默认的为<code>Think</code> ,便进入到else分支中，获取<code>$this→tVar</code>变量值赋值给<code>$params</code>，之后再进入到<code>Hook::listen</code>方法中</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010760.png" alt="请添加图片描述"></p><p>进入<code>exec</code>方法中，处理后调用<code>Behavior\ParseTemplateBehavior</code>类中的run方法处理<code>$params</code>这个带有日志文件路径的值</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010491.png" alt="请添加图片描述"></p><p>程序进入run方法中，一系列判断后，进入else分支，调用Think\Template类中的fetch方法对变量$_data（带有日志文件路径的变量值）进行处理</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010091.png" alt="请添加图片描述"></p><p>进入Think\Template类中的fetch方法，获取缓存文件路径后，再进入Storage的load方法中</p><p><img src="https://sn0w.oss-cn-shenzhen.aliyuncs.com/img/202304040010551.png" alt="在这里插入图片描述"></p><p><code>$_filename</code>为之前获取的缓存文件路径，$var则为之前带有_filename=日志文件路径的数组，$vars不为空则使用extract方法的<code>EXTR_OVERWRITE</code>默认描述对变量值进行覆盖，之后include该日志文件路径，造成文件包含，最终导致包含文件造成RCE</p><h2 id="Thinkphp3-2-3-日志泄露"><a href="#Thinkphp3-2-3-日志泄露" class="headerlink" title="Thinkphp3.2.3 日志泄露"></a>Thinkphp3.2.3 日志泄露</h2><blockquote><p>前提：开启了Debug</p></blockquote><p>THINKPHP3.2 结构：<code>Application/Runtime/Logs/Home/年份_月份_日期.log</code></p><h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><p>@<a href="https://y4er.com/post/thinkphp3-vuln/">https://y4er.com/post/thinkphp3-vuln/</a></p><p>@<a href="https://blog.csdn.net/rfrder/article/details/114024426">https://blog.csdn.net/rfrder/article/details/114024426</a></p><p>@<a href="https://www.cnblogs.com/zpchcbd/p/12552185.html">https://www.cnblogs.com/zpchcbd/p/12552185.html</a></p><p>@<a href="https://paper.seebug.org/573/">https://paper.seebug.org/573/</a></p><p>@<a href="https://mp.weixin.qq.com/s/_4IZe-aZ_3O2PmdQrVbpdQ">https://mp.weixin.qq.com/s/_4IZe-aZ_3O2PmdQrVbpdQ</a></p><p>@<a href="https://blog.csdn.net/Mruos/article/details/109802121">https://blog.csdn.net/Mruos/article/details/109802121</a></p><p>@<a href="https://blog.csdn.net/qq_33382313/article/details/51702787">https://blog.csdn.net/qq_33382313/article/details/51702787</a></p><p>@<a href="https://www.cnblogs.com/lingzhisec/p/15728886.html">https://www.cnblogs.com/lingzhisec/p/15728886.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
